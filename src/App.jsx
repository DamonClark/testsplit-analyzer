import React, { useState } from 'react';
import { Upload, BarChart3, Clock, Zap, Download, Mail, CheckCircle, AlertCircle } from 'lucide-react';
import FileUpload from './components/FileUpload.jsx';
import { parseFileToTests, generateTemplateCsv, generateTemplateJson } from './utils/parseTestData.js';
import { buildAnalysisFromTests } from './utils/analyzeTests.js';

const TestSplitAnalyzer = () => {
  const [analysis, setAnalysis] = useState(null);
  const [email, setEmail] = useState('');
  const [emailSubmitted, setEmailSubmitted] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const showSampleAnalysis = () => {
    // Mock analysis results that demonstrate the value
    const mockAnalysis = {
      totalTests: 145,
      currentRuntime: 18.5,
      currentRunners: 4,
      optimizedRuntime: 11.2,
      optimizedRunners: 6,
      efficiencyGain: 39.5,
      currentDistribution: [
        { runner: 'Runner 1', tests: 45, duration: 18.2 },
        { runner: 'Runner 2', tests: 38, duration: 16.8 },
        { runner: 'Runner 3', tests: 32, duration: 15.1 },
        { runner: 'Runner 4', tests: 30, duration: 14.9 }
      ],
      optimizedDistribution: [
        { runner: 'Runner 1', tests: 24, duration: 11.1 },
        { runner: 'Runner 2', tests: 25, duration: 11.0 },
        { runner: 'Runner 3', tests: 24, duration: 10.9 },
        { runner: 'Runner 4', tests: 25, duration: 11.2 },
        { runner: 'Runner 5', tests: 24, duration: 10.8 },
        { runner: 'Runner 6', tests: 23, duration: 10.7 }
      ],
      slowestTests: [
        { name: 'user-authentication-flow.spec.js', duration: 4.2 },
        { name: 'payment-processing.spec.js', duration: 3.8 },
        { name: 'admin-dashboard.spec.js', duration: 3.5 }
      ]
    };

    setAnalysis(mockAnalysis);
  };

  const downloadText = (filename, text) => {
    const blob = new Blob([text], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    a.click();
    URL.revokeObjectURL(url);
  };

  const handleFileSelected = async (file) => {
    setError('');
    setLoading(true);
    try {
      const tests = await parseFileToTests(file);
      const built = buildAnalysisFromTests(tests, 6);
      setAnalysis(built);
    } catch (e) {
      setError(e?.message || 'Failed to parse file. Please upload CSV or JSON.');
    } finally {
      setLoading(false);
    }
  };

  const generateConfig = () => {
    const config = `# GitHub Actions Matrix Configuration
name: E2E Tests Optimized

jobs:
  test:
    strategy:
      matrix:
        runner: [1, 2, 3, 4, 5, 6]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run tests
        run: npm run test:e2e -- --group=\${{ matrix.runner }}

# Test groups optimized for ~11 minute runtime each
# Generated by TestSplit Analyzer`;

    const blob = new Blob([config], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'optimized-test-config.yml';
    a.click();
    URL.revokeObjectURL(url);
  };

  const handleEmailSubmit = async () => {
    if (email) {
      try {
        // Use Netlify Forms - works automatically on Netlify hosting
        const formData = new FormData();
        formData.append('form-name', 'testsplit-waitlist');
        formData.append('email', email);
        formData.append('timestamp', new Date().toISOString());
        formData.append('source', 'TestSplit Analyzer');

        await fetch('/', {
          method: 'POST',
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
          body: new URLSearchParams(formData).toString()
        });

        setEmailSubmitted(true);
        console.log('Email submitted via Netlify Forms:', email);
      } catch (error) {
        console.error('Failed to save email:', error);
        setEmailSubmitted(true);
      }
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      {/* Hidden form for Netlify Forms detection */}
      <div style={{ display: 'none' }}>
        <form name="testsplit-waitlist" netlify="true">
          <input type="email" name="email" />
          <input type="text" name="timestamp" />
          <input type="text" name="source" />
        </form>
      </div>

      <div className="max-w-6xl mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-12">
          <div className="flex justify-center items-center gap-3 mb-4">
            <Zap className="text-blue-600 w-8 h-8" />
            <h1 className="text-4xl font-bold text-gray-900">TestSplit Analyzer</h1>
          </div>
          <p className="text-xl text-gray-600 max-w-2xl mx-auto">
            Analyze your CI test suite and discover how much time you could save with optimized parallelization
          </p>
        </div>

        {/* Hero Section with Demo Button and Upload */}
        {!analysis && (
          <div className="bg-white rounded-2xl shadow-lg p-8 mb-8 space-y-10">
            {/* Intro */}
            <div className="text-center">
              <BarChart3 className="mx-auto w-14 h-14 text-blue-500 mb-4" />
              <h2 className="text-2xl font-semibold mb-3">See How Much Time You Could Save</h2>
              <p className="text-gray-600 max-w-xl mx-auto">
                Most teams can reduce their CI test runtime by 30–50% with optimized parallelization.
                Upload your test timings to get your analysis—or explore the sample.
              </p>
              <button
                onClick={showSampleAnalysis}
                className="mt-6 bg-blue-600 text-white px-8 py-3 rounded-xl font-semibold text-lg hover:bg-blue-700 transition-colors inline-flex items-center gap-2"
              >
                <Zap className="w-5 h-5" />
                See Sample Analysis
              </button>
            </div>

            {/* Step 1: Upload */}
            <div className="space-y-4">
              <h3 className="text-lg font-bold text-gray-900 flex items-center gap-2">
                <Upload className="w-5 h-5 text-gray-600" />
                Step 1: Upload Your Test Timings (CSV or JSON)
              </h3>

              <FileUpload onFileSelected={handleFileSelected} />

              {error && <div className="text-sm text-red-600">{error}</div>}
              {loading && <div className="text-sm text-gray-600">Parsing and analyzing…</div>}

              <div className="flex flex-wrap gap-2 text-sm">
                <button
                  onClick={() => downloadText('test-timings.template.csv', generateTemplateCsv())}
                  className="px-3 py-2 bg-gray-100 hover:bg-gray-200 rounded-md"
                >
                  Download CSV Template
                </button>
                <button
                  onClick={() => downloadText('test-timings.template.json', generateTemplateJson())}
                  className="px-3 py-2 bg-gray-100 hover:bg-gray-200 rounded-md"
                >
                  Download JSON Template
                </button>
              </div>
            </div>

            {/* Step 2: Optional Help */}
            <details className="bg-gray-50 border border-gray-200 rounded-lg p-5">
              <summary className="cursor-pointer font-semibold text-gray-800 flex items-center gap-2">
                <AlertCircle className="w-5 h-5 text-gray-600" />
                Need help generating timings?
              </summary>
              <p className="text-sm text-gray-700 mt-3 mb-4">
                Works with Cypress, Playwright, Jest, and Vitest. Run one of these commands to create a
                <span className="font-mono"> results.json </span> file, then upload it.
              </p>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
                {[
                  { name: 'Cypress', cmd: 'npx cypress run --reporter json --reporter-options output=results.json' },
                  { name: 'Playwright', cmd: 'npx playwright test --reporter=json > results.json' },
                  { name: 'Jest', cmd: 'npx jest --runInBand --json --outputFile=results.json' },
                  { name: 'Vitest', cmd: 'npx vitest run --reporter=json > results.json' },
                ].map((tool) => (
                  <div key={tool.name}>
                    <div className="font-semibold text-gray-800 mb-1">{tool.name}</div>
                    <pre className="bg-white border border-gray-200 rounded p-2 overflow-x-auto text-xs">
                      <code>{tool.cmd}</code>
                    </pre>
                  </div>
                ))}
              </div>
            </details>

            {/* Footer mini highlights */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-gray-600">
              <div className="flex items-center justify-center gap-2">
                <CheckCircle className="w-4 h-4 text-green-500" />
                <span>Works with any CI system</span>
              </div>
              <div className="flex items-center justify-center gap-2">
                <CheckCircle className="w-4 h-4 text-green-500" />
                <span>Supports Cypress & Playwright</span>
              </div>
              <div className="flex items-center justify-center gap-2">
                <CheckCircle className="w-4 h-4 text-green-500" />
                <span>Free analysis & recommendations</span>
              </div>
            </div>
          </div>
        )}

        {/* Analysis Results */}
        {analysis && (
          <div className="space-y-8">
            {/* Summary Cards */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="bg-white rounded-xl shadow-lg p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-gray-600 text-sm">Current Runtime</p>
                    <p className="text-3xl font-bold text-red-600">{analysis.currentRuntime}m</p>
                  </div>
                  <Clock className="text-red-500 w-8 h-8" />
                </div>
              </div>

              <div className="bg-white rounded-xl shadow-lg p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-gray-600 text-sm">Optimized Runtime</p>
                    <p className="text-3xl font-bold text-green-600">{analysis.optimizedRuntime}m</p>
                  </div>
                  <Zap className="text-green-500 w-8 h-8" />
                </div>
              </div>

              <div className="bg-white rounded-xl shadow-lg p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-gray-600 text-sm">Time Saved</p>
                    <p className="text-3xl font-bold text-blue-600">{analysis.efficiencyGain}%</p>
                  </div>
                  <BarChart3 className="text-blue-500 w-8 h-8" />
                </div>
              </div>
            </div>

            {/* Distribution Comparison */}
            <div className="bg-white rounded-xl shadow-lg p-8">
              <h3 className="text-2xl font-semibold mb-6 flex items-center gap-2">
                <BarChart3 className="text-blue-600" />
                Runner Distribution Comparison
              </h3>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <div>
                  <h4 className="font-semibold text-red-600 mb-4">Current Distribution</h4>
                  <div className="space-y-3">
                    {analysis.currentDistribution.map((runner, index) => (
                      <div key={index} className="flex items-center justify-between p-3 bg-red-50 rounded-lg">
                        <span className="font-medium">{runner.runner}</span>
                        <div className="text-right">
                          <div className="text-sm text-gray-600">{runner.tests} tests</div>
                          <div className="font-semibold">{runner.duration}m</div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                <div>
                  <h4 className="font-semibold text-green-600 mb-4">Optimized Distribution</h4>
                  <div className="space-y-3">
                    {analysis.optimizedDistribution.map((runner, index) => (
                      <div key={index} className="flex items-center justify-between p-3 bg-green-50 rounded-lg">
                        <span className="font-medium">{runner.runner}</span>
                        <div className="text-right">
                          <div className="text-sm text-gray-600">{runner.tests} tests</div>
                          <div className="font-semibold">{runner.duration}m</div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>

            {/* Insights */}
            <div className="bg-white rounded-xl shadow-lg p-8">
              <h3 className="text-2xl font-semibold mb-6 flex items-center gap-2">
                <AlertCircle className="text-orange-500" />
                Key Insights
              </h3>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="bg-orange-50 p-6 rounded-lg">
                  <h4 className="font-semibold text-orange-800 mb-3">Bottlenecks Identified</h4>
                  <ul className="space-y-2">
                    {analysis.slowestTests.map((test, index) => (
                      <li key={index} className="flex justify-between text-sm">
                        <span className="truncate">{test.name}</span>
                        <span className="font-medium">{test.duration}m</span>
                      </li>
                    ))}
                  </ul>
                </div>

                <div className="bg-blue-50 p-6 rounded-lg">
                  <h4 className="font-semibold text-blue-800 mb-3">Optimization Strategy</h4>
                  <ul className="space-y-2 text-sm">
                    <li className="flex items-start gap-2">
                      <CheckCircle className="text-green-500 w-4 h-4 mt-0.5 flex-shrink-0" />
                      <span>Increase runners from 4 to 6</span>
                    </li>
                    <li className="flex items-start gap-2">
                      <CheckCircle className="text-green-500 w-4 h-4 mt-0.5 flex-shrink-0" />
                      <span>Balance test groups by duration</span>
                    </li>
                    <li className="flex items-start gap-2">
                      <CheckCircle className="text-green-500 w-4 h-4 mt-0.5 flex-shrink-0" />
                      <span>Isolate slowest tests</span>
                    </li>
                  </ul>
                </div>
              </div>
            </div>

            {/* Actions */}
            <div className="bg-white rounded-xl shadow-lg p-8">
              <h3 className="text-2xl font-semibold mb-6">Next Steps</h3>

              <div className="flex flex-col sm:flex-row gap-4 mb-8">
                <button
                  onClick={generateConfig}
                  className="flex items-center gap-2 bg-blue-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors"
                >
                  <Download className="w-5 h-5" />
                  Download Optimized Config
                </button>

                <button className="flex items-center gap-2 bg-green-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-green-700 transition-colors">
                  <Mail className="w-5 h-5" />
                  Get Full Analysis Report
                </button>
              </div>

              {/* Email Signup */}
              <div className="bg-gradient-to-r from-blue-50 to-indigo-50 p-6 rounded-lg">
                <h4 className="font-semibold text-gray-800 mb-2">Want the Full Solution?</h4>
                <p className="text-gray-600 mb-4">
                  We're building a complete CI/CD optimization platform. Get early access and advanced features:
                </p>

                {!emailSubmitted ? (
                  <div className="flex gap-3">
                    <input
                      type="email"
                      value={email}
                      onChange={(e) => setEmail(e.target.value)}
                      placeholder="your.email@company.com"
                      className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                    <button
                      onClick={handleEmailSubmit}
                      className="bg-blue-600 text-white px-6 py-2 rounded-lg font-semibold hover:bg-blue-700 transition-colors"
                    >
                      Join Waitlist
                    </button>
                  </div>
                ) : (
                  <div className="flex items-center gap-2 text-green-600">
                    <CheckCircle className="w-5 h-5" />
                    <span>Thanks! We'll keep you updated on our progress.</span>
                  </div>
                )}

                <div className="mt-4 flex justify-center">
                  <button
                    onClick={() => setAnalysis(null)}
                    className="text-blue-600 hover:text-blue-700 text-sm font-medium"
                  >
                    Try Another Analysis
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Footer */}
        <div className="text-center mt-16 text-gray-500">
          <p>Built for teams serious about CI/CD optimization</p>
        </div>
      </div>
    </div>
  );
};

export default TestSplitAnalyzer;